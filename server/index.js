const express = require('express');
const webpack = require('webpack');
const webpackDevMiddleware = require('webpack-dev-middleware');
const webpackHotMiddleware = require('webpack-hot-middleware');
const webpackHotServerMiddleware = require('webpack-hot-server-middleware');

const clientConfig = require('../build/webpack.client.dev.conf');
const serverConfig = require('../build/webpack.server.dev.conf');

const fs = require('fs');
const path = require('path');
const resolve = file => path.resolve(__dirname, file);
const { createBundleRenderer } = require('vue-server-renderer');

const isProd = process.env.NODE_ENV === 'production';
const templatePath = resolve('../src/index.template.html');

// require('browser-env')();
// console.log(window);

const app = express();

let renderer;

function createRenderer (bundle, options) {
	// https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
	return createBundleRenderer(bundle, Object.assign(options, {
		// for component caching
		// cache: LRU({
		// max: 1000,
		// maxAge: 1000 * 60 * 15
		// }),
		// this is only needed when vue-server-renderer is npm-linked
		basedir: resolve('./dist'),
		// recommended for performance
		runInNewContext: false
	}));
};

if (process.env.NODE_ENV !== 'production') {
	// make a webpack compiler for the client bundle and the server bundle
	const compiler = webpack([clientConfig, serverConfig]);

	// kick-off the webpack build and watch files for changes
	app.use(webpackDevMiddleware(compiler, {
		serverSideRender: true,
	}));

	// setup hmr server to send client bundle changes to the browser
	app.use(webpackHotMiddleware(compiler.compilers.find(c => c.name === 'client')));

	// setup our server so that it reloads when changes are made to the server bundle
	app.use(webpackHotServerMiddleware(compiler));
} else {
	console.log('---------> setting up production serve');
	app.use(express.static('dist'));

	// In production: create server renderer using template and built server bundle.
	// The server bundle is generated by vue-ssr-webpack-plugin.
	const template = fs.readFileSync(templatePath, 'utf-8')

	const bundle = require('../dist/vue-ssr-server-bundle.json');
	// The client manifests are optional, but it allows the renderer
	// to automatically infer preload/prefetch links and directly add <script>
	// tags for any async chunks used during render, avoiding waterfall requests.
	const clientManifest = require('../dist/vue-ssr-client-manifest.json');
	renderer = createRenderer(bundle, {
		template,
		clientManifest
	});
}


function render (req, res) {
	console.log('---------> rendering production serve');
	const s = Date.now();

	res.setHeader("Content-Type", "text/html");

	const handleError = err => {
		if (err.url) {
			res.redirect(err.url)
		} else if(err.code === 404) {
			res.status(404).send('404 | Page Not Found')
		} else {
			// Render Error Page or Redirect
			res.status(500).send('500 | Internal Server Error')
			console.error(`error during render : ${req.url}`)
			console.error(err.stack)
		}
	}

	const context = {
		title: 'Some Title from Context Object', // default title
		url: req.url
	};

	renderer.renderToString(context, (err, html) => {
		if (err) {
		return handleError(err)
		}
		res.send(html);
		if (!isProd) {
			console.log(`whole request: ${Date.now() - s}ms`);
		}
	});
}

app.get('*', isProd ? render : (req, res) => {
	console.log('we hit the non production server');
	readyPromise.then(() => render(req, res));
});

app.listen(8080);
